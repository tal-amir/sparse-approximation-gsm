          Sparse Approximation by the Generalized SoftMin Penalty
          =======================================================

Tal Amir, Ronen Basri, Boaz Nadler
Weizmann Institute of Science

Version v1.10, 23-Mar-2020

eMail: tal.amir@weizmann.ac.il

Based on the paper [1].

Given an n x d dictionary A, a vector y in R^n and sparsity level k <= n,
estimates a solution to the sparse approximation problem

(P0)             min_x ||A*x-y||_2 s.t. ||x||_0 <= k.

Input arguments:
A - Matrix of size n x d
y - Column vector in R^n
k - Target sparsity level, 1 < k < n
varargin - name/value pairs of parameters. Details appear below.

Output arguments:
x_sol - Estimated solution vector to Problem (P0)
sol   - A struct containing information about the solution.

This program requires the Mosek optimization solver.
https://www.mosek.com/downloads/


Method overview
===============

Prob. (P0) is approached by estimating a solution to the trimmed-lasso [2]
relaxation

(P^p_lambda)     min_x (1/p)*||A*x-y||^p + lambda * tau_k(x)

for several values of lambda. Problem (P^p_lambda) is approached by the
soft surrogate

(P^p_{lambda,gamma})  min_x (1/p)*||A*x-y||^p + lambda * tau_{k,gamma}(x),

where tau_{k,gamma}(x) is the generaized soft-min penalty [1]. In turn,
each problem (P^p_{lambda,gamma}) is approached by solving a sequence of
convex problems

(P^p_{lambda,w})  min (1/p)*||A*x-y||^p + lambda * <w, abs(x)>.

For further details, see [1].

[1] Tal Amir, Ronen Basri, Boaz Nadler (2020) - The Trimmed Lasso: Sparse
    Recovery Guarantees and Practical Optimization by the Generalized
    Soft-Min Penalty

[2] Bertsimas, Copenhaver, Mazumder (2017) - The trimmed Lasso: Sparsity
    and Robustness


Parameters
==========

profile
  {'fast', 'normal', 'thorough', 'crazy'}
  Each profile contains a set of default values for the other parameters.
  Default: 'normal'


verbosity
  Output verbosity level.
  0 - Quiet
  1 - Summary only
  2 - Summary and report for each lambda
  3 - Summary, report for each lambda and report violations
  4 - All of the above, including warnings on each call to external solver
      that results in numerical problems.
  Default: 2

residualPower
  {1, 2}
  The power p to be used for the residual norm of the
  unconstrained relaxation
                min x   (1/p)*||Ax-y||^p + lambda*tau_k(x)
  Default: 2

P0_objective_stop_threshold
  Non-negative number. Threshold for early stopping.
  After solving (P_lambda) and taking a k-sparse projection of the solution
  Pi_k(x), if ||A*Pi_k(x) - y||_2 <= <P0_objective_stop_threshold>
  the algorithm stops and does not run with more values of lambda.
  Default: 0

nGammaVals_max
  Positive integer
  Maximal number of gamma values to be used in the homotopy for solving
  (P_lambda). If that value is surpassed, gamma is set to infinity and a
  final instance of (P_lambda,gamma) is solved.
  Default: 10000

start_with_equality_constraint
  Boolean
  Tells whether to start by solving the equality-constrained problem
                min x   tau_k(x) s.t. Ax=y
  This is equivalent to starting with a very small lambda.
  Default: false

nLambdaVals
  Integer >= 2
  Number of lambda values to be used for solving (P_lambda)
  This parameter is ignored when <lambdaVals> is set.
  Default: fast: 25, normal: 50, thorough: 100, crazy: 100

lambdaRel_min
  Positive real number
  By default the values of lambda used for power-2 are increasing
  exponentially in the interval [lambdaRel_min, 1+1e-4] * lambda_bar. 
  This parameter is ignored when <lambdaVals> is defined.
  Default: 1e-8

lambdaVals
  A vector of positive numbers, or []
  Manually sets the values of lambda. Overrides <nLambdaVals> and
  <lambdaRel_min>. When left empty, the values are chosen automatically.
  Default: []

x_init
  n x 1 sized vector, or []
  To be used as initialization during the optimization.
  Note: When <init_x_from_previous_lambda> is 'on' or 'nonsparse', x_init
        is only used in the first value of lambda.
  See <init_x_from_previous_lambda>, <full_homotopy_with_init>
  Default: []

init_x_from_previous_lambda
  Logical
  When solving (P_lambda), this parameter tells whether to use the solution
  obtained for the previous lambda as initialization. This overrides
  <x_init>, except for the first value of gamma.
  See <x_init>, <full_homotopy_with_init>
  Default: 'off'

full_homotopy_with_init
  Logical
  When solving (P_lambda) with initialization, either perform a full 
  homotopy over gamma in [0,inf], or start the homotopy at the smallest
  gamma for which F_{k,gamma}(x_init) <= F_{k,gamma}(x_l), where xl is the
  obtained solution for gamma=0.  
  Default: False
  See <x_init>, <init_x_from_previous_lambda>

nGammas_sparse_w_to_stop
  Positive integer
  When the weight vector w_{k,gamma_t}(x_t) is (d-k)-sparse for
  <nTimes_sparse_w_to_stop> consecutive values of t, the algorithm sets
  gamma to infinity, solves (P_{lambda,infty}) and then stops.
  See <sparsityThreshAbs_w>.
  Default: fast: 3, normal: 4, thorough: 4, crazy: 6

sparsityThreshAbs_x
  Positive number
  An iterate x is considered k-sparse if the average absolute value of
  its d-k smallest-magnitude entries is below this threshold.
  See <nLambdas_sparse_x_to_stop>
  Default: fast: 1e-5, normal: 1e-6, thorough: 1e-6, crazy: 1e-7

sparsityThreshAbs_w
  Positive number
  A weight vector w is considered k-sparse if the average absolute value of
  its k smallest-magnitude entries is below this threshold.
  See <nGammas_sparse_w_to_stop>.
  Default: 1e-5

nLambdas_sparse_x_to_stop
  Positive integer
  When a k-sparse solution of (P_lambda) is obtained for
  <nTimes_sparse_x_to_stop> consecutive values of lambda, the algorithm
  stops without running further values of lambda. Use inf to disable.
  See <sparsityThreshAbs_x>.
  Default: fast: 4, normal: 7, thorough: 7, crazy: inf

nGammas_sparse_x_to_stop
  Positive integer
  During the homotopy, if the obtained solution (P_lambda,gamma_r) is
  k-sparse and with the same support for <nGammas_sparse_x_to_stop>
  consecutive values gamma_r, the homotopy moves directly to gamma=inf and
  then terminates.
  See <sparsityThreshAbs_x>.
  Default: fast: 5, normal: 10, thorough: 10, crazy: inf


w_diff_thresh_to_keep_increasing_gamma
  Positive number
  During the homotopy, after solving each subproblem (P_lambda,gamma),
  gamma_t is increased to gamma_{t+1} by multiplying with
  <gamma_growth_factor> at least once. To speed up
  the process, this multiplication is done repeatedly as long as
      || w_{k,gamma_{t+1}}(x_t) -  w_{k,gamma_t}(x_t) ||_inf <=
       (d-k)/d * <w_diff_thresh_to_keep_increasing_gamma>.
  Default: fast: 1e-2 normal: 1e-3 thorough: 1e-4 crazy: 1e-4

Plg_minimal_decrease
  Positive number
  Stopping criterion when solving (P_lambda,gamma).
  If for several consecutive iterations the objective F_{lambda,gamma}(x^t)
  does not los at least this fraction of its value, it is considered as
  convergence and the iterations stop. The exact condition is
        F_{lambda,gamma}(x^{t-1}) - F_{lambda,gamma}(x^t) <=
              F_{lambda,gamma}(x^{t-1}) * <Plg_minimal_decrease>,
  and the iterations stop when it is satisfied for n consecutive times.
  n is given by <Plg_num_small_decreases_for_stopping> when gamma is finite
  and by <Plg_num_small_decreases_for_stopping_on_infinite_gamma> when
  gamma = inf.
  Default: fast: 1e-3, normal: 1e-3, thorough: 1e-3, crazy: 1e-4

Plg_num_small_decreases_for_stopping
  Positive integer
  See <Plg_minimal_decrease>.
  Default: fast: 2, normal: 2, thorough: 2, crazy: 3

Plg_num_small_decreases_for_stopping_on_infinite_gamma
  Positive integer
  See <Plg_minimal_decrease>.
  Default: fast: 3, normal: 5, thorough: 6, crazy: 6

Plg_minimal_decrease_immediate
  Positive number
  Similar to <Plg_minimal_decrease>, but when the decrease is below this
  threshold, the iterations stop immediately.
  Default: 1e-6

Plg_max_num_mm_iters
  Positive integer
  Maximal number of iterations when solving (P_{lambda,gamma}).
  Default: 1000

gamma_first_max_difference_of_sums
  Positive number
  This parameter helps determine the value of gamma_1. Let x_0 be the
  obtained solution of (P_lambda,gamma) with gamma_0=0. Then gamma_1 is
  chosen such that
      Delta_k(gamma_1 * abs(x_0)) = <gamma_first_max_difference_of_sums>,
  where Delta_k(z) is the difference between the sum of maximal (d-k) entries
  and minimal (d-k) entries of z. This ensures that approximately
  max_i w^i_{k,gamma_1}(x) <= (1 + <gamma_first_max_difference_of_sums>) *
      min_i w^i_{k,gamma_1}(x).
  Default: 1e-4

gamma_growth_factor
  Positive number
  In the homotopy, this factor tells by how much to multiply gamma when
  finished solving one instance of (P{lambda,gamma}).
  Default: fast: 1.03, normal: 1.02, thorough: 1.02, crazy: 1.01

gamma_test_every_n_iters
  Positive integer.
  In the homotopy, once every <gamma_test_every_n_iters> gamma updates,
  we check whether gamma can be increased by a larger growth factor than
  <gamma_growth_factor> without affecting the next iterate.
  The numbers in the vector <gamma_test_growth_factors> are tested as
  potential growth factors, in decreasing order. For each factor, the
  problem (P_{lambda,factor*gamma_r}) is solved, initialized by the
  previous iterate x_r. If, for one of the factors, the solution x^star is close
  to x_r, then we update gamma_{r+1} = factor*gamma_r and x_{r+1} = x^star.
  Being close, meaning that either of the following condition holds,
     ||x_r - x^star||_inf <= gamma_test_maximal_x_distance_abs
  of
     ||x_r - x^star||_inf <= gamma_test_maximal_x_distance_rel ||x_r||_inf.
  close to the current iterate up to (d-k)/d*<gamma_test_maximal_x_distance>
  Default: 8

gamma_test_growth_factors
  A vector of decreasing positive numbers. See <gamma_test_every_n_iters>.
  Default: [10, 2, 1.2]

gamma_test_maximal_x_distance_abs
  Positive number. See <gamma_test_every_n_iters>
  Deault: 1e-6

gamma_test_maximal_x_distance_rel
  Positive number. See <gamma_test_every_n_iters>
  Deault: 1e-6
